name: Cline Issue Assistant

on:
  issue_comment:
    types: [created, edited]

permissions:
  issues: write

jobs:
  respond:
    runs-on: ubuntu-latest
    environment: cline-actions
    steps:
      - name: Check for @cline mention
        id: detect
        uses: actions/github-script@v7
        with:
          script: |
            const body = context.payload.comment?.body || "";
            const isPR = !!context.payload.issue?.pull_request;
            const hit = body.toLowerCase().includes("@cline");
            core.setOutput("hit", (!isPR && hit) ? "true" : "false");
            core.setOutput("issue_number", String(context.payload.issue?.number || ""));
            core.setOutput("issue_url", context.payload.issue?.html_url || "");
            core.setOutput("comment_body", body);

      - name: Checkout repository
        if: steps.detect.outputs.hit == 'true'
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Setup Cline CLI
        if: steps.detect.outputs.hit == 'true'
        run: |
          # check node version
          node --version
          
          # Install the latest Cline CLI
          sudo npm install -g cline@nightly
          
          # Verify
          cline version

      - name: Create Cline Instance
        if: steps.detect.outputs.hit == 'true'
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          CLINE_DIR: ${{ runner.temp }}/cline
        run: |
          set -x  # Enable bash debugging
          
          # Show environment
          echo "=== Environment ==="
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "HOME: $HOME"
          echo "CLINE_DIR: $CLINE_DIR"
          echo "PWD: $(pwd)"
          
          # Setup CLINE_DIR
          mkdir -p "$CLINE_DIR"
          chmod 700 "$CLINE_DIR"
          echo "Created CLINE_DIR at: $CLINE_DIR"
          
          # Create instance with verbose output
          echo "=== Creating Cline instance with verbose output ==="
          cline instance new -v || {
            echo "=== Instance creation failed ==="
            
            # Dump all log files
            echo "=== Cline Core Logs ==="
            if [ -d "$CLINE_DIR/logs" ]; then
              for logfile in "$CLINE_DIR/logs"/cline-core-*.log; do
                if [ -f "$logfile" ]; then
                  echo "--- $logfile ---"
                  cat "$logfile"
                fi
              done
            else
              echo "No logs directory found"
            fi
            
            echo "=== Cline Host Logs ==="
            if [ -d "$CLINE_DIR/logs" ]; then
              for logfile in "$CLINE_DIR/logs"/cline-host-*.log; do
                if [ -f "$logfile" ]; then
                  echo "--- $logfile ---"
                  cat "$logfile"
                fi
              done
            else
              echo "No logs directory found"
            fi
            
            # Check database
            echo "=== Database Check ==="
            if [ -f "$CLINE_DIR/x/locks.db" ]; then
              echo "Database exists at $CLINE_DIR/x/locks.db"
              ls -la "$CLINE_DIR/x/locks.db"
            else
              echo "Database NOT found at $CLINE_DIR/x/locks.db"
              echo "Contents of CLINE_DIR:"
              ls -laR "$CLINE_DIR"
            fi
            
            exit 1
          }
          
          # Get instance address
          echo "=== Instance created successfully ==="
          CLINE_ADDRESS=$(cline instance list | sed -n '3p')
          echo "CLINE_ADDRESS: $CLINE_ADDRESS"
          echo "CLINE_ADDRESS=$CLINE_ADDRESS" >> $GITHUB_ENV
          
          # Configure API key
          echo "=== Configuring API key ==="
          cline config set open-router-api-key=$OPENROUTER_API_KEY --address $CLINE_ADDRESS -v

      - name: Download analyze script
        if: steps.detect.outputs.hit == 'true'
        run: |
          curl -L https://raw.githubusercontent.com/csells/fibscli/refs/heads/master/git-scripts/analyze-issue.sh -o analyze-issue.sh -H "Cache-Control: no-cache" 
          chmod +x analyze-issue.sh

      - name: Run analysis
        if: steps.detect.outputs.hit == 'true'
        id: analyze
        env:
          ISSUE_URL: ${{ steps.detect.outputs.issue_url }}
          COMMENT: ${{ steps.detect.outputs.comment_body }}
          CLINE_ADDRESS: ${{ env.CLINE_ADDRESS }}
        run: |
          set -euo pipefail
          
          RESULT=$(./analyze-issue.sh "${ISSUE_URL}" "Analyze this issue. The user asked: ${COMMENT}" "$CLINE_ADDRESS")
          
          {
            echo 'result<<EOF'
            printf "%s\n" "$RESULT"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: Post response
        if: steps.detect.outputs.hit == 'true'
        uses: actions/github-script@v7
        env:
          ISSUE_NUMBER: ${{ steps.detect.outputs.issue_number }}
          RESULT: ${{ steps.analyze.outputs.result }}
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: Number(process.env.ISSUE_NUMBER),
              body: process.env.RESULT || "(no output)"
            });
